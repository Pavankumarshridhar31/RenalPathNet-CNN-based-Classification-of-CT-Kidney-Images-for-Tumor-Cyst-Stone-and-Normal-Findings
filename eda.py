# -*- coding: utf-8 -*-
"""final_ EDA_Kindney_stone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rLYYHPHPJu-XpSJQYh7T0iDPoUsfxLpD
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

import os


import seaborn as sns

kidney_data_df= pd.read_csv("/content/kidneyData.csv", header=0)

kidney_data_df.head()

kidney_data_df.tail()

kidney_data_df.dtypes

kidney_data_df.info()

kidney_data_df['Class'].unique()

kidney_classes = kidney_data_df['Class'].value_counts()

sum_of_element = kidney_classes.sum()

# Display unique values in the 'Class' column
unique_classes = kidney_data_df['Class'].unique()

# Count occurrences of each class
kidney_classes = kidney_data_df['Class'].value_counts()

# Calculate the total number of elements
sum_of_elements = kidney_classes.sum()

# Print unique classes
print("Unique kidney classes:\n", unique_classes)

# Print class counts
print("Kidney classes counts:\n", kidney_classes)

# Print the total number of elements
print("Sum of elements is:", sum_of_elements)

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming you have already loaded your dataset into kidney_data_df

# Define custom colors for each class
colors = ['skyblue', 'lightgreen', 'lightcoral', 'orange']

# Create a count plot with custom colors
sns.countplot(x='Class', data=kidney_data_df, palette=colors)

# Set plot title and axis labels
plt.title('Number of Cases', fontsize=14)
plt.xlabel('Case Type', fontsize=12)
plt.ylabel('Count', fontsize=12)

# Show the plot
plt.show()

normal_ct_path = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Normal"
cyst_ct_path = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Cyst"
stone_ct_path = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Stone"
tumor_ct_path = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Tumor"

import os

# Specify the directory paths
normal_ct_dir = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Normal"
cyst_ct_dir = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Cyst"
stone_ct_dir = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Stone"
tumor_ct_dir = "/content/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Tumor"

# Get the paths of image files in each directory
normal_ct_paths = [os.path.join(normal_ct_dir, file) for file in os.listdir(normal_ct_dir) if file.endswith(('.png', '.jpg', '.jpeg'))]
cyst_ct_paths = [os.path.join(cyst_ct_dir, file) for file in os.listdir(cyst_ct_dir) if file.endswith(('.png', '.jpg', '.jpeg'))]
stone_ct_paths = [os.path.join(stone_ct_dir, file) for file in os.listdir(stone_ct_dir) if file.endswith(('.png', '.jpg', '.jpeg'))]
tumor_ct_paths = [os.path.join(tumor_ct_dir, file) for file in os.listdir(tumor_ct_dir) if file.endswith(('.png', '.jpg', '.jpeg'))]

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os

def plot_image_comparison(img1_path, img2_path, label1='Image 1', label2='Image 2'):
    try:
        print(f"Attempting to read images from paths: {img1_path} and {img2_path}")
        img1 = mpimg.imread(img1_path)
        img2 = mpimg.imread(img2_path)

        if img1 is not None and img2 is not None:
            plt.figure(figsize=(12, 5))

            plt.subplot(1, 2, 1)
            plt.imshow(img1)
            plt.title(label1)
            plt.xlabel(os.path.basename(img1_path))  # Display the image file name as xlabel

            plt.subplot(1, 2, 2)
            plt.imshow(img2)
            plt.title(label2)
            plt.xlabel(os.path.basename(img2_path))  # Display the image file name as xlabel

            plt.tight_layout()
            plt.show()
        else:
            print("Error: Unable to read one or both of the images")

    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage:
plot_image_comparison(normal_ct_paths[45], cyst_ct_paths[45], label1='Normal', label2='Cyst')

import cv2
import seaborn as sns
import matplotlib.pyplot as plt

def plot_image_size_distribution(img_paths, labels):
    sizes = [(cv2.imread(img_path).shape[0], cv2.imread(img_path).shape[1]) for img_path in img_paths]

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=[size[0] for size in sizes], y=[size[1] for size in sizes], hue=labels)
    plt.title('Distribution of Image Sizes')
    plt.xlabel('Height')
    plt.ylabel('Width')
    plt.show()

# Example usage:
labels = ['Normal'] * len(normal_ct_paths) + ['Cyst'] * len(cyst_ct_paths) + ['Stone'] * len(stone_ct_paths) + ['Tumor'] * len(tumor_ct_paths)
plot_image_size_distribution(normal_ct_paths + cyst_ct_paths + stone_ct_paths + tumor_ct_paths, labels)

import random

def plot_image_previews(img_paths, labels, num_samples=5):
    sample_images = random.sample(list(zip(img_paths, labels)), num_samples)

    plt.figure(figsize=(15, 5))
    for i, (img_path, label) in enumerate(sample_images):
        plt.subplot(1, num_samples, i+1)
        img = cv2.imread(img_path)
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))  # Convert BGR to RGB
        plt.title(f'{label}\n{os.path.basename(img_path)}')
        plt.axis('off')

    plt.show()

# Example usage:
plot_image_previews(normal_ct_paths, labels, num_samples=5)

